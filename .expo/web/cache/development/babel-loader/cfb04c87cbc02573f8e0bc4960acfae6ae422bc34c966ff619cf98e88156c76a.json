{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar CountryDetails = function CountryDetails() {\n  var _useParams = useParams(),\n    countryName = _useParams.countryName;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    healthCareServices = _useState2[0],\n    setHealthCareServices = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    modalVisible = _useState4[0],\n    setModalVisible = _useState4[1];\n  var _useState5 = useState('Sélectionnez votre pays de départ'),\n    _useState6 = _slicedToArray(_useState5, 2),\n    selectedCountry = _useState6[0],\n    setSelectedCountry = _useState6[1];\n  var _useState7 = useState([]),\n    _useState8 = _slicedToArray(_useState7, 2),\n    recommendations = _useState8[0],\n    setRecommendations = _useState8[1];\n  var _useState9 = useState(''),\n    _useState10 = _slicedToArray(_useState9, 2),\n    newRecommendation = _useState10[0],\n    setNewRecommendation = _useState10[1];\n  var _useState11 = useState(''),\n    _useState12 = _slicedToArray(_useState11, 2),\n    paysId = _useState12[0],\n    setPaysId = _useState12[1];\n  var _useState13 = useState(''),\n    _useState14 = _slicedToArray(_useState13, 2),\n    selectedCountryId = _useState14[0],\n    setSelectedCountryId = _useState14[1];\n  var _useState15 = useState(null),\n    _useState16 = _slicedToArray(_useState15, 2),\n    distance = _useState16[0],\n    setDistance = _useState16[1];\n  var _useState17 = useState(null),\n    _useState18 = _slicedToArray(_useState17, 2),\n    carbonFootprint = _useState18[0],\n    setCarbonFootprint = _useState18[1];\n  var _useState19 = useState([]),\n    _useState20 = _slicedToArray(_useState19, 2),\n    departureCountries = _useState20[0],\n    setDepartureCountries = _useState20[1];\n  var ip = \"10.192.5.233\";\n  var apiURL = \"http://\" + ip + \":8888/api\";\n  var getStoredUserId = function () {\n    var _ref = _asyncToGenerator(function* () {\n      try {\n        var userId = localStorage.getItem('userId');\n        return userId;\n      } catch (error) {\n        console.error('Erreur lors de la récupération de l\\'ID de l\\'utilisateur:', error);\n        return null;\n      }\n    });\n    return function getStoredUserId() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  var getActesSante = useCallback(_asyncToGenerator(function* () {\n    try {\n      var response = yield fetch(apiURL + \"/actesante/\" + countryName);\n      if (!response.ok) {\n        throw new Error('Erreur réseau lors de la récupération des données');\n      }\n      var data = yield response.json();\n      var paysIdValue = data.pays_id;\n      setPaysId(paysIdValue);\n      var actesSante = data.actesSante;\n      var formattedData = actesSante.map(function (item) {\n        return {\n          id: item.id.toString(),\n          service: item.nom,\n          prix: item.prix + \"\\u20AC\"\n        };\n      });\n      setHealthCareServices(formattedData);\n      yield getRecommandations(paysIdValue);\n    } catch (error) {\n      console.error(\"Erreur lors de la récupération des actes de santé:\", error);\n    }\n  }), [countryName, apiURL]);\n  var getRecommandations = function () {\n    var _ref3 = _asyncToGenerator(function* (paysId) {\n      try {\n        var response = yield fetch(apiURL + \"/recommandations/\" + paysId);\n        if (!response.ok) {\n          throw new Error('Erreur réseau lors de la récupération des recommandations');\n        }\n        var data = yield response.json();\n        var formattedData = data.recommandations.map(function (item) {\n          return {\n            id: item.id.toString(),\n            text: item.contenu\n          };\n        });\n        setRecommendations(formattedData);\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des recommandations:\", error);\n      }\n    });\n    return function getRecommandations(_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var handleDeleteRecommendation = function () {\n    var _ref4 = _asyncToGenerator(function* (recommendationId) {\n      try {\n        var response = yield fetch(apiURL + \"/recommandations/\" + recommendationId, {\n          method: 'DELETE'\n        });\n        if (!response.ok) {\n          throw new Error('Erreur réseau lors de la suppression de la recommandation');\n        }\n        setRecommendations(function (prevRecommendations) {\n          return prevRecommendations.filter(function (recommendation) {\n            return recommendation.id !== recommendationId;\n          });\n        });\n      } catch (error) {\n        console.error(\"Erreur lors de la suppression de la recommandation:\", error);\n      }\n    });\n    return function handleDeleteRecommendation(_x2) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n  var getCountriesByName = useCallback(_asyncToGenerator(function* () {\n    try {\n      var response = yield fetch(apiURL + \"/pays/names\");\n      if (!response.ok) {\n        throw new Error('Erreur réseau lors de la récupération des noms de pays');\n      }\n      var data = yield response.json();\n      setDepartureCountries(data);\n    } catch (error) {\n      console.error(\"Erreur lors de la récupération des noms de pays:\", error);\n    }\n  }), [apiURL]);\n  var AddRecommendation = function () {\n    var _ref6 = _asyncToGenerator(function* () {\n      try {\n        var response = yield fetch(apiURL + \"/recommandations\", {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            contenu: newRecommendation,\n            pays_id: paysId\n          })\n        });\n        if (response.ok) {\n          var data = yield response.json();\n          if (data.recommandation) {\n            setNewRecommendation('');\n            getRecommandations(paysId);\n          } else {\n            console.error('Erreur lors de la création de la recommandation:', data.message);\n          }\n        } else {\n          console.error('Erreur lors de la création de la recommandation:', response.statusText);\n        }\n      } catch (error) {\n        console.error('Erreur lors de la création de la recommandation:', error);\n      }\n    });\n    return function AddRecommendation() {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n  var addTrajet = function () {\n    var _ref7 = _asyncToGenerator(function* (paysId, selectedCountryId, carbonFootprint) {\n      try {\n        var userId = yield getStoredUserId();\n        var requestData = {\n          user_id: userId,\n          pays_id: paysId,\n          pays_id2: selectedCountryId,\n          empreinte_co2: carbonFootprint\n        };\n        var response = yield fetch(apiURL + \"/deplacement\", {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(requestData)\n        });\n        if (response.status === 201) {\n          alert('Déplacement enregistré avec succès!');\n        } else {\n          console.error('Erreur lors de la création du déplacement:', response.status);\n        }\n      } catch (error) {\n        console.error('Erreur lors de l\\'ajout du trajet:', error);\n      }\n    });\n    return function addTrajet(_x3, _x4, _x5) {\n      return _ref7.apply(this, arguments);\n    };\n  }();\n  var getCountryByEnglishName = function () {\n    var _ref8 = _asyncToGenerator(function* (countryName) {\n      try {\n        var response = yield fetch(apiURL + \"/pays/\" + countryName);\n        if (!response.ok) {\n          throw new Error('Erreur réseau lors de la récupération des noms de pays');\n        }\n        var data = yield response.json();\n        if (data != null) {\n          setSelectedCountryId(data.id);\n          return data.nom_anglais;\n        } else {\n          return null;\n        }\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des noms de pays:\", error);\n        return null;\n      }\n    });\n    return function getCountryByEnglishName(_x6) {\n      return _ref8.apply(this, arguments);\n    };\n  }();\n  var handleEstimateCarbonFootprint = function () {\n    var _ref9 = _asyncToGenerator(function* (departureCountry, selectedCountry) {\n      var getCapital = function () {\n        var _ref10 = _asyncToGenerator(function* (countryNameInEnglish) {\n          var formattedCountryName = formatCountryName(countryName);\n          var apiUrl = \"https://restcountries.com/v3.1/name/\" + encodeURIComponent(formattedCountryName);\n          try {\n            var response = yield fetch(apiUrl);\n            if (!response.ok) {\n              throw new Error(\"Capitale non trouv\\xE9e pour le pays : \" + formattedCountryName);\n            }\n            var data = yield response.json();\n            return data[0].capital[0];\n          } catch (error) {\n            console.error('Erreur lors de la récupération de la capitale:', error);\n            return null;\n          }\n        });\n        return function getCapital(_x9) {\n          return _ref10.apply(this, arguments);\n        };\n      }();\n      var formatCountryName = function formatCountryName(countryName) {\n        var countryNameMap = {\n          \"Tunisie\": \"Tunisia\",\n          \"Afghanistan\": \"Afghanistan\",\n          \"Afrique du Sud\": \"South Africa\",\n          \"Albanie\": \"Albania\",\n          \"Algérie\": \"Algeria\",\n          \"Allemagne\": \"Germany\",\n          \"Andorre\": \"Andorra\",\n          \"Angola\": \"Angola\",\n          \"Antigua-et-Barbuda\": \"Antigua and Barbuda\",\n          \"Arabie Saoudite\": \"Saudi Arabia\",\n          \"Argentine\": \"Argentina\",\n          \"Arménie\": \"Armenia\",\n          \"Australie\": \"Australia\",\n          \"Autriche\": \"Austria\",\n          \"Azerbaïdjan\": \"Azerbaijan\",\n          \"Bahamas\": \"Bahamas\",\n          \"Bahreïn\": \"Bahrain\",\n          \"Bangladesh\": \"Bangladesh\",\n          \"Barbade\": \"Barbados\",\n          \"Belgique\": \"Belgium\",\n          \"Belize\": \"Belize\",\n          \"Bénin\": \"Benin\",\n          \"Bhoutan\": \"Bhutan\",\n          \"Biélorussie\": \"Belarus\",\n          \"Birmanie\": \"Myanmar\",\n          \"Bolivie\": \"Bolivia\",\n          \"Bosnie-Herzégovine\": \"Bosnia and Herzegovina\",\n          \"Botswana\": \"Botswana\",\n          \"Brésil\": \"Brazil\",\n          \"Brunei\": \"Brunei\",\n          \"Bulgarie\": \"Bulgaria\",\n          \"Burkina Faso\": \"Burkina Faso\",\n          \"Burundi\": \"Burundi\",\n          \"Cambodge\": \"Cambodia\",\n          \"Cameroun\": \"Cameroon\",\n          \"Canada\": \"Canada\",\n          \"Cap-Vert\": \"Cape Verde\",\n          \"Chili\": \"Chile\",\n          \"Chine\": \"China\",\n          \"Chypre\": \"Cyprus\",\n          \"Colombie\": \"Colombia\",\n          \"Comores\": \"Comoros\",\n          \"Congo\": \"Congo\",\n          \"Corée du Nord\": \"North Korea\",\n          \"Corée du Sud\": \"South Korea\",\n          \"Costa Rica\": \"Costa Rica\",\n          \"Côte d'Ivoire\": \"Ivory Coast\",\n          \"Croatie\": \"Croatia\",\n          \"Cuba\": \"Cuba\",\n          \"Danemark\": \"Denmark\",\n          \"Djibouti\": \"Djibouti\",\n          \"Dominique\": \"Dominica\",\n          \"Égypte\": \"Egypt\",\n          \"Émirats Arabes Unis\": \"United Arab Emirates\",\n          \"Équateur\": \"Ecuador\",\n          \"Érythrée\": \"Eritrea\",\n          \"Espagne\": \"Spain\",\n          \"Estonie\": \"Estonia\",\n          \"Eswatini\": \"Eswatini\",\n          \"États-Unis d'Amérique\": \"United States of America\",\n          \"Éthiopie\": \"Ethiopia\",\n          \"Fidji\": \"Fiji\",\n          \"Finlande\": \"Finland\",\n          \"France\": \"France\",\n          \"Gabon\": \"Gabon\",\n          \"Gambie\": \"Gambia\",\n          \"Géorgie\": \"Georgia\",\n          \"Ghana\": \"Ghana\",\n          \"Grèce\": \"Greece\",\n          \"Grenade\": \"Grenada\",\n          \"Guatemala\": \"Guatemala\",\n          \"Guinée\": \"Guinea\",\n          \"Guinée-Bissau\": \"Guinea-Bissau\",\n          \"Guinée équatoriale\": \"Equatorial Guinea\",\n          \"Guyana\": \"Guyana\",\n          \"Haïti\": \"Haiti\",\n          \"Honduras\": \"Honduras\",\n          \"Hongrie\": \"Hungary\",\n          \"Îles Marshall\": \"Marshall Islands\",\n          \"Îles Salomon\": \"Solomon Islands\",\n          \"Inde\": \"India\",\n          \"Indonésie\": \"Indonesia\",\n          \"Irak\": \"Iraq\",\n          \"Iran\": \"Iran\",\n          \"Irlande\": \"Ireland\",\n          \"Islande\": \"Iceland\",\n          \"Palestine\": \"Palestine\",\n          \"Italie\": \"Italy\",\n          \"Jamaïque\": \"Jamaica\",\n          \"Japon\": \"Japan\",\n          \"Jordanie\": \"Jordan\",\n          \"Kazakhstan\": \"Kazakhstan\",\n          \"Kenya\": \"Kenya\",\n          \"Kirghizistan\": \"Kyrgyzstan\",\n          \"Kiribati\": \"Kiribati\",\n          \"Koweït\": \"Kuwait\",\n          \"Laos\": \"Laos\",\n          \"Lesotho\": \"Lesotho\",\n          \"Lettonie\": \"Latvia\",\n          \"Liban\": \"Lebanon\",\n          \"Libéria\": \"Liberia\",\n          \"Libye\": \"Libya\",\n          \"Liechtenstein\": \"Liechtenstein\",\n          \"Lituanie\": \"Lithuania\",\n          \"Luxembourg\": \"Luxembourg\",\n          \"Macédoine du Nord\": \"North Macedonia\",\n          \"Madagascar\": \"Madagascar\",\n          \"Malaisie\": \"Malaysia\",\n          \"Malawi\": \"Malawi\",\n          \"Maldives\": \"Maldives\",\n          \"Mali\": \"Mali\",\n          \"Malte\": \"Malta\",\n          \"Maroc\": \"Morocco\",\n          \"Maurice\": \"Mauritius\",\n          \"Mauritanie\": \"Mauritania\",\n          \"Mexique\": \"Mexico\",\n          \"États fédérés de Micronésie\": \"Federal States of Micronesia\",\n          \"Moldavie\": \"Moldova\",\n          \"Monaco\": \"Monaco\",\n          \"Mongolie\": \"Mongolia\",\n          \"Monténégro\": \"Montenegro\",\n          \"Mozambique\": \"Mozambique\",\n          \"Namibie\": \"Namibia\",\n          \"Nauru\": \"Nauru\",\n          \"Népal\": \"Nepal\",\n          \"Nicaragua\": \"Nicaragua\",\n          \"Niger\": \"Niger\",\n          \"Nigeria\": \"Nigeria\",\n          \"Norvège\": \"Norway\",\n          \"Nouvelle-Zélande\": \"New Zealand\",\n          \"Oman\": \"Oman\",\n          \"Ouganda\": \"Uganda\",\n          \"Ouzbékistan\": \"Uzbekistan\",\n          \"Pakistan\": \"Pakistan\",\n          \"Palaos\": \"Palau\",\n          \"Panama\": \"Panama\",\n          \"Papouasie-Nouvelle-Guinée\": \"Papua New Guinea\",\n          \"Paraguay\": \"Paraguay\",\n          \"Pays-Bas\": \"Netherlands\",\n          \"Pérou\": \"Peru\",\n          \"Philippines\": \"Philippines\",\n          \"Pologne\": \"Poland\",\n          \"Portugal\": \"Portugal\",\n          \"Qatar\": \"Qatar\",\n          \"République Centrafricaine\": \"Central African Republic\",\n          \"République Dominicaine\": \"Dominican Republic\",\n          \"République Démocratique du Congo\": \"Democratic Republic of the Congo\",\n          \"République du Congo\": \"Republic of the Congo\",\n          \"République Tchèque\": \"Czech Republic\",\n          \"Roumanie\": \"Romania\",\n          \"Royaume-Uni\": \"United Kingdom\",\n          \"Russie\": \"Russia\",\n          \"Rwanda\": \"Rwanda\",\n          \"Saint-Christophe-et-Niévès\": \"Saint Kitts and Nevis\",\n          \"Saint-Marin\": \"San Marino\",\n          \"Saint-Vincent-et-les-Grenadines\": \"Saint Vincent and the Grenadines\",\n          \"Sainte-Lucie\": \"Saint Lucia\",\n          \"Salomon\": \"Solomon Islands\",\n          \"Salvador\": \"El Salvador\",\n          \"Samoa\": \"Samoa\",\n          \"Sao Tomé-et-Principe\": \"Sao Tome and Principe\",\n          \"Sénégal\": \"Senegal\",\n          \"Serbie\": \"Serbia\",\n          \"Seychelles\": \"Seychelles\",\n          \"Sierra Leone\": \"Sierra Leone\",\n          \"Singapour\": \"Singapore\",\n          \"Slovaquie\": \"Slovakia\",\n          \"Slovénie\": \"Slovenia\",\n          \"Somalie\": \"Somalia\",\n          \"Soudan\": \"Sudan\",\n          \"Soudan du Sud\": \"South Sudan\",\n          \"Sri Lanka\": \"Sri Lanka\",\n          \"Suède\": \"Sweden\",\n          \"Suisse\": \"Switzerland\",\n          \"Suriname\": \"Suriname\",\n          \"Syrie\": \"Syria\",\n          \"Tadjikistan\": \"Tajikistan\",\n          \"Tanzanie\": \"Tanzania\",\n          \"Tchad\": \"Chad\",\n          \"Thaïlande\": \"Thailand\",\n          \"Timor oriental\": \"East Timor\",\n          \"Togo\": \"Togo\",\n          \"Tonga\": \"Tonga\",\n          \"Trinité-et-Tobago\": \"Trinidad and Tobago\",\n          \"Turkménistan\": \"Turkmenistan\",\n          \"Turquie\": \"Turkey\",\n          \"Tuvalu\": \"Tuvalu\",\n          \"Ukraine\": \"Ukraine\",\n          \"Uruguay\": \"Uruguay\",\n          \"Vanuatu\": \"Vanuatu\",\n          \"Vatican\": \"Vatican City\",\n          \"Venezuela\": \"Venezuela\",\n          \"Vietnam\": \"Vietnam\",\n          \"Yémen\": \"Yemen\",\n          \"Zambie\": \"Zambia\",\n          \"Zimbabwe\": \"Zimbabwe\"\n        };\n        return countryNameMap[countryName] || countryName;\n      };\n      var getLatLng = function () {\n        var _ref11 = _asyncToGenerator(function* (city) {\n          var apiKey = 'AIzaSyBJvL7tfCzIXc5w56h0xtbiF1_Lb5roxi4';\n          var url = \"https://maps.googleapis.com/maps/api/geocode/json?address=\" + encodeURIComponent(city) + \"&key=\" + apiKey;\n          try {\n            var response = yield fetch(url);\n            var data = yield response.json();\n            if (data.status === 'OK') {\n              var location = data.results[0].geometry.location;\n              return {\n                latitude: location.lat,\n                longitude: location.lng\n              };\n            } else {\n              return null;\n            }\n          } catch (error) {\n            console.error('Erreur lors de la récupération des coordonnées:', error);\n            return null;\n          }\n        });\n        return function getLatLng(_x10) {\n          return _ref11.apply(this, arguments);\n        };\n      }();\n      var calculateEmissions = function () {\n        var _ref12 = _asyncToGenerator(function* () {\n          var departureCity = yield getCapital(departureCountry);\n          var selectedCity = yield getCapital(selectedCountry);\n          if (!departureCity || !selectedCity) {\n            console.error(\"Impossible de récupérer les informations sur les capitales\");\n            return;\n          }\n          var departureLoc = yield getLatLng(departureCity);\n          var selectedLoc = yield getLatLng(selectedCity);\n          if (departureLoc && selectedLoc) {\n            var _distance = calculateDistance(departureLoc.latitude, departureLoc.longitude, selectedLoc.latitude, selectedLoc.longitude);\n            var _carbonFootprint = calculateCarbonFootprint(_distance);\n            setDistance(_distance.toFixed(2));\n            setCarbonFootprint(_carbonFootprint.toFixed(2));\n          } else {\n            console.error(\"Erreur de calcul des émissions de carbone lors du trajet\");\n          }\n        });\n        return function calculateEmissions() {\n          return _ref12.apply(this, arguments);\n        };\n      }();\n      var calculateDistance = function calculateDistance(lat1, lon1, lat2, lon2) {\n        var earthRadius = 6371;\n        var latDelta = toRadians(lat2 - lat1);\n        var lonDelta = toRadians(lon2 - lon1);\n        var a = Math.sin(latDelta / 2) * Math.sin(latDelta / 2) + Math.cos(toRadians(lat1)) * Math.cos(toRadians(lat2)) * Math.sin(lonDelta / 2) * Math.sin(lonDelta / 2);\n        var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n        return earthRadius * c;\n      };\n      var toRadians = function toRadians(degrees) {\n        return degrees * (Math.PI / 180);\n      };\n      var calculateCarbonFootprint = function calculateCarbonFootprint(distance) {\n        return distance * (229.97 * 0.001);\n      };\n      var departureCity = yield getCapital(departureCountry);\n      var selectedCity = yield getCapital(selectedCountry);\n      var departureLoc = yield getLatLng(departureCity);\n      var selectedLoc = yield getLatLng(selectedCity);\n      if (departureLoc && selectedLoc) {\n        var _distance2 = calculateDistance(departureLoc.latitude, departureLoc.longitude, selectedLoc.latitude, selectedLoc.longitude);\n        var _carbonFootprint2 = calculateCarbonFootprint(_distance2);\n        setDistance(_distance2.toFixed(2));\n        setCarbonFootprint(_carbonFootprint2.toFixed(2));\n      } else {\n        console.error(\"Erreur de calcul des émissions de carbone lors du trajet\");\n      }\n      calculateEmissions();\n    });\n    return function handleEstimateCarbonFootprint(_x7, _x8) {\n      return _ref9.apply(this, arguments);\n    };\n  }();\n  var handleCountryChange = function handleCountryChange(event) {\n    setSelectedCountry(event.target.value);\n  };\n  useEffect(function () {\n    if (countryName) {\n      getActesSante();\n      getCountriesByName();\n    }\n  }, [countryName, getActesSante, getCountriesByName]);\n  return _jsx(\"div\", {\n    style: styles.container,\n    children: _jsxs(\"div\", {\n      style: styles.card,\n      children: [_jsx(\"div\", {\n        style: styles.cardHeader,\n        children: _jsxs(\"h2\", {\n          style: styles.cardHeaderText,\n          children: [\"Actes de Sant\\xE9 en \", countryName]\n        })\n      }), _jsxs(\"div\", {\n        style: styles.cardBody,\n        children: [healthCareServices.map(function (service) {\n          return _jsx(\"div\", {\n            style: styles.serviceCard,\n            children: _jsxs(\"p\", {\n              style: styles.serviceText,\n              children: [service.service, \" - \", service.prix]\n            })\n          }, service.id);\n        }), _jsxs(\"h3\", {\n          style: styles.subtitle,\n          children: [\"Recommandations pour \", countryName]\n        }), recommendations.map(function (recommendation) {\n          return _jsxs(\"div\", {\n            style: styles.recommendationCard,\n            children: [_jsx(\"p\", {\n              children: recommendation.text\n            }), _jsx(\"button\", {\n              style: styles.deleteButton,\n              onClick: function onClick() {\n                return handleDeleteRecommendation(recommendation.id);\n              },\n              children: \"Supprimer\"\n            })]\n          }, recommendation.id);\n        }), _jsx(\"button\", {\n          style: styles.button,\n          onClick: AddRecommendation,\n          children: \"Ajouter Recommandation\"\n        }), _jsx(\"input\", {\n          style: styles.input,\n          onChange: function onChange(e) {\n            return setNewRecommendation(e.target.value);\n          },\n          value: newRecommendation,\n          placeholder: \"Ajouter une recommandation\"\n        }), _jsx(\"h3\", {\n          style: styles.subtitle,\n          children: \"Estimation de l'Empreinte Carbone pour le Voyage\"\n        }), _jsx(\"button\", {\n          onClick: function onClick() {\n            return setModalVisible(true);\n          },\n          style: styles.dropdown,\n          children: selectedCountry\n        }), _jsx(\"label\", {\n          htmlFor: \"countrySelect\",\n          style: styles.label,\n          children: \"S\\xE9lectionnez votre pays de d\\xE9part :\"\n        }), _jsxs(\"select\", {\n          id: \"countrySelect\",\n          style: styles.dropdown,\n          value: selectedCountry,\n          onChange: handleCountryChange,\n          children: [_jsx(\"option\", {\n            value: \"\",\n            children: \"S\\xE9lectionnez un pays\"\n          }), departureCountries.map(function (country) {\n            return _jsx(\"option\", {\n              value: country,\n              children: country\n            }, country);\n          })]\n        }), selectedCountry !== \"Sélectionnez votre pays de départ\" && _jsx(\"button\", {\n          style: styles.button,\n          onClick: function onClick() {\n            return handleEstimateCarbonFootprint(countryName, selectedCountry);\n          },\n          children: \"Calculer l'empreinte carbone\"\n        }), _jsx(\"div\", {\n          children: distance !== null && carbonFootprint !== null && _jsxs(\"div\", {\n            children: [_jsxs(\"p\", {\n              children: [\"Distance: \", distance, \" km\"]\n            }), _jsxs(\"p\", {\n              children: [\"Empreinte carbone: \", carbonFootprint, \" kgCO2e/km/personne\"]\n            })]\n          })\n        }), carbonFootprint ? _jsx(\"button\", {\n          style: styles.button,\n          onClick: function onClick() {\n            return addTrajet(paysId, selectedCountryId, carbonFootprint);\n          },\n          children: \"Ajouter aux trajets sauvegard\\xE9s\"\n        }) : null]\n      })]\n    })\n  });\n};\nvar styles = {\n  container: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    padding: '2rem',\n    backgroundColor: '#f7f7f7',\n    minHeight: '100vh'\n  },\n  card: {\n    backgroundColor: '#ffffff',\n    boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)',\n    borderRadius: '10px',\n    maxWidth: '800px',\n    width: '100%',\n    margin: '1rem',\n    overflow: 'hidden'\n  },\n  cardHeader: {\n    backgroundColor: '#0056b3',\n    color: '#ffffff',\n    padding: '1rem',\n    fontSize: '1.5rem',\n    fontWeight: 'bold',\n    textAlign: 'center'\n  },\n  cardBody: {\n    padding: '1rem'\n  },\n  serviceCard: {\n    borderBottom: '1px solid #eeeeee',\n    paddingBottom: '0.5rem',\n    marginBottom: '0.5rem'\n  },\n  serviceText: {\n    fontSize: '1rem',\n    color: '#333333'\n  },\n  subtitle: {\n    fontWeight: 'bold',\n    marginTop: '1rem',\n    marginBottom: '0.5rem',\n    fontSize: '1.2rem'\n  },\n  button: {\n    backgroundColor: '#28a745',\n    color: '#ffffff',\n    padding: '10px 20px',\n    border: 'none',\n    borderRadius: '5px',\n    cursor: 'pointer',\n    margin: '0.5rem',\n    fontSize: '1rem',\n    transition: 'background-color 0.3s ease',\n    ':hover': {\n      backgroundColor: '#218838'\n    }\n  },\n  deleteButton: {\n    backgroundColor: '#dc3545',\n    ':hover': {\n      backgroundColor: '#c82333'\n    }\n  },\n  input: {\n    width: '100%',\n    padding: '10px',\n    marginBottom: '1rem',\n    border: '1px solid #cccccc',\n    borderRadius: '5px',\n    fontSize: '1rem'\n  },\n  dropdown: {\n    width: '100%',\n    padding: '10px',\n    marginBottom: '1rem',\n    border: '1px solid #cccccc',\n    borderRadius: '5px',\n    background: '#ffffff',\n    fontSize: '1rem',\n    cursor: 'pointer'\n  },\n  modalView: {\n    position: 'fixed',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    backgroundColor: '#fff',\n    padding: '2rem',\n    borderRadius: '10px',\n    boxShadow: '0 4px 8px rgba(0, 0, 0, 0.2)',\n    zIndex: 1000,\n    maxWidth: '600px',\n    width: '90%'\n  },\n  countryOption: {\n    padding: '10px',\n    ':hover': {\n      backgroundColor: '#f0f0f0'\n    }\n  }\n};\nexport default CountryDetails;","map":{"version":3,"names":["React","useState","useEffect","useCallback","useParams","jsxs","_jsxs","jsx","_jsx","CountryDetails","_useParams","countryName","_useState","_useState2","_slicedToArray","healthCareServices","setHealthCareServices","_useState3","_useState4","modalVisible","setModalVisible","_useState5","_useState6","selectedCountry","setSelectedCountry","_useState7","_useState8","recommendations","setRecommendations","_useState9","_useState10","newRecommendation","setNewRecommendation","_useState11","_useState12","paysId","setPaysId","_useState13","_useState14","selectedCountryId","setSelectedCountryId","_useState15","_useState16","distance","setDistance","_useState17","_useState18","carbonFootprint","setCarbonFootprint","_useState19","_useState20","departureCountries","setDepartureCountries","ip","apiURL","getStoredUserId","_ref","_asyncToGenerator","userId","localStorage","getItem","error","console","apply","arguments","getActesSante","response","fetch","ok","Error","data","json","paysIdValue","pays_id","actesSante","formattedData","map","item","id","toString","service","nom","prix","getRecommandations","_ref3","recommandations","text","contenu","_x","handleDeleteRecommendation","_ref4","recommendationId","method","prevRecommendations","filter","recommendation","_x2","getCountriesByName","AddRecommendation","_ref6","headers","body","JSON","stringify","recommandation","message","statusText","addTrajet","_ref7","requestData","user_id","pays_id2","empreinte_co2","status","alert","_x3","_x4","_x5","getCountryByEnglishName","_ref8","nom_anglais","_x6","handleEstimateCarbonFootprint","_ref9","departureCountry","getCapital","_ref10","countryNameInEnglish","formattedCountryName","formatCountryName","apiUrl","encodeURIComponent","capital","_x9","countryNameMap","getLatLng","_ref11","city","apiKey","url","location","results","geometry","latitude","lat","longitude","lng","_x10","calculateEmissions","_ref12","departureCity","selectedCity","departureLoc","selectedLoc","calculateDistance","calculateCarbonFootprint","toFixed","lat1","lon1","lat2","lon2","earthRadius","latDelta","toRadians","lonDelta","a","Math","sin","cos","c","atan2","sqrt","degrees","PI","_x7","_x8","handleCountryChange","event","target","value","style","styles","container","children","card","cardHeader","cardHeaderText","cardBody","serviceCard","serviceText","subtitle","recommendationCard","deleteButton","onClick","button","input","onChange","e","placeholder","dropdown","htmlFor","label","country","display","flexDirection","alignItems","padding","backgroundColor","minHeight","boxShadow","borderRadius","maxWidth","width","margin","overflow","color","fontSize","fontWeight","textAlign","borderBottom","paddingBottom","marginBottom","marginTop","border","cursor","transition","background","modalView","position","top","left","transform","zIndex","countryOption"],"sources":["C:/Users/naelo/Desktop/sante-app-react-js/src/CountryDetailsScreen.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst CountryDetails = () => {\r\n  const { countryName } = useParams();\r\n  const [healthCareServices, setHealthCareServices] = useState([]);\r\n  const [modalVisible, setModalVisible] = useState(false);\r\n  const [selectedCountry, setSelectedCountry] = useState('Sélectionnez votre pays de départ');\r\n  const [recommendations, setRecommendations] = useState([]);\r\n  const [newRecommendation, setNewRecommendation] = useState('');\r\n  const [paysId, setPaysId] = useState('');\r\n  const [selectedCountryId, setSelectedCountryId] = useState('');\r\n  const [distance, setDistance] = useState(null);\r\n  const [carbonFootprint, setCarbonFootprint] = useState(null);\r\n  const [departureCountries, setDepartureCountries] = useState([]);\r\n\r\n  const ip = \"10.192.5.233\";\r\n  const apiURL = `http://${ip}:8888/api`;\r\n\r\n  const getStoredUserId = async () => {\r\n    try {\r\n      const userId = localStorage.getItem('userId');\r\n      return userId;\r\n    } catch (error) {\r\n      console.error('Erreur lors de la récupération de l\\'ID de l\\'utilisateur:', error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const getActesSante = useCallback(async () => {\r\n    try {\r\n      const response = await fetch(`${apiURL}/actesante/${countryName}`);\r\n      if (!response.ok) {\r\n        throw new Error('Erreur réseau lors de la récupération des données');\r\n      }\r\n      const data = await response.json();\r\n      const paysIdValue = data.pays_id; \r\n      setPaysId(paysIdValue); \r\n      const actesSante = data.actesSante;\r\n      const formattedData = actesSante.map(item => ({\r\n        id: item.id.toString(),\r\n        service: item.nom,\r\n        prix: `${item.prix}€`\r\n      }));\r\n      setHealthCareServices(formattedData);\r\n      await getRecommandations(paysIdValue);\r\n    } catch (error) {\r\n      console.error(\"Erreur lors de la récupération des actes de santé:\", error);\r\n    }\r\n  }, [countryName, apiURL]);\r\n\r\n  const getRecommandations = async (paysId) => {\r\n    try {\r\n      const response = await fetch(`${apiURL}/recommandations/${paysId}`);\r\n      if (!response.ok) {\r\n        throw new Error('Erreur réseau lors de la récupération des recommandations');\r\n      }\r\n      const data = await response.json();\r\n      const formattedData = data.recommandations.map(item => ({\r\n        id: item.id.toString(),\r\n        text: item.contenu\r\n      }));\r\n      setRecommendations(formattedData);\r\n    } catch (error) {\r\n      console.error(\"Erreur lors de la récupération des recommandations:\", error);\r\n    }\r\n  };\r\n\r\n  const handleDeleteRecommendation = async (recommendationId) => {\r\n    try {\r\n      const response = await fetch(`${apiURL}/recommandations/${recommendationId}`, {\r\n        method: 'DELETE',\r\n      });\r\n      if (!response.ok) {\r\n        throw new Error('Erreur réseau lors de la suppression de la recommandation');\r\n      }\r\n      \r\n      setRecommendations(prevRecommendations =>\r\n        prevRecommendations.filter(recommendation => recommendation.id !== recommendationId)\r\n      );\r\n    } catch (error) {\r\n      console.error(\"Erreur lors de la suppression de la recommandation:\", error);\r\n    }\r\n  };    \r\n\r\n  const getCountriesByName = useCallback(async () => {\r\n    try {\r\n      const response = await fetch(`${apiURL}/pays/names`);\r\n      if (!response.ok) {\r\n        throw new Error('Erreur réseau lors de la récupération des noms de pays');\r\n      }\r\n      const data = await response.json();\r\n      setDepartureCountries(data);  \r\n    } catch (error) {\r\n      console.error(\"Erreur lors de la récupération des noms de pays:\", error);\r\n    }\r\n  }, [apiURL]);\r\n\r\n  const AddRecommendation = async () => {\r\n    try {\r\n      const response = await fetch(`${apiURL}/recommandations`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          contenu: newRecommendation,\r\n          pays_id: paysId, \r\n        }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        if (data.recommandation) {\r\n          setNewRecommendation('');\r\n          getRecommandations(paysId); // Refresh recommendations\r\n        } else {\r\n          console.error('Erreur lors de la création de la recommandation:', data.message);\r\n        }\r\n      } else {\r\n        console.error('Erreur lors de la création de la recommandation:', response.statusText);\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur lors de la création de la recommandation:', error);\r\n    }\r\n  };\r\n\r\n  const addTrajet = async (paysId, selectedCountryId, carbonFootprint) => {\r\n    try {\r\n      const userId = await getStoredUserId();\r\n      \r\n      const requestData = {\r\n        user_id: userId,\r\n        pays_id: paysId,\r\n        pays_id2: selectedCountryId, \r\n        empreinte_co2: carbonFootprint,\r\n      };\r\n  \r\n      const response = await fetch(`${apiURL}/deplacement`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(requestData),\r\n      });\r\n  \r\n      if (response.status === 201) {\r\n        alert('Déplacement enregistré avec succès!');\r\n      } else {\r\n        console.error('Erreur lors de la création du déplacement:', response.status);\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur lors de l\\'ajout du trajet:', error);\r\n    }\r\n  };\r\n\r\n  const getCountryByEnglishName = async (countryName) => {\r\n    try {\r\n      const response = await fetch(`${apiURL}/pays/${countryName}`);\r\n      if (!response.ok) {\r\n        throw new Error('Erreur réseau lors de la récupération des noms de pays');\r\n      }\r\n      const data = await response.json();\r\n      if (data != null) {\r\n        setSelectedCountryId(data.id);\r\n        return data.nom_anglais;\r\n      } else {\r\n        return null;\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Erreur lors de la récupération des noms de pays:\", error);\r\n      return null;\r\n    }\r\n  };\r\n  \r\n  const handleEstimateCarbonFootprint = async (departureCountry, selectedCountry) => {\r\n     const getCapital = async (countryNameInEnglish) => {\r\n      const formattedCountryName = formatCountryName(countryName); \r\n      const apiUrl = `https://restcountries.com/v3.1/name/${encodeURIComponent(formattedCountryName)}`;\r\n  \r\n      try {\r\n        const response = await fetch(apiUrl);\r\n        if (!response.ok) {\r\n          throw new Error(`Capitale non trouvée pour le pays : ${formattedCountryName}`);\r\n        }\r\n        const data = await response.json();\r\n        return data[0].capital[0];\r\n      } catch (error) {\r\n        console.error('Erreur lors de la récupération de la capitale:', error);\r\n        return null;\r\n      }\r\n    };\r\n    const formatCountryName = (countryName) => {\r\n      const countryNameMap = {\r\n        \"Tunisie\": \"Tunisia\",\r\n        \"Afghanistan\": \"Afghanistan\",\r\n        \"Afrique du Sud\": \"South Africa\",\r\n        \"Albanie\": \"Albania\",\r\n        \"Algérie\": \"Algeria\",\r\n        \"Allemagne\": \"Germany\",\r\n        \"Andorre\": \"Andorra\",\r\n        \"Angola\": \"Angola\",\r\n        \"Antigua-et-Barbuda\": \"Antigua and Barbuda\",\r\n        \"Arabie Saoudite\": \"Saudi Arabia\",\r\n        \"Argentine\": \"Argentina\",\r\n        \"Arménie\": \"Armenia\",\r\n        \"Australie\": \"Australia\",\r\n        \"Autriche\": \"Austria\",\r\n        \"Azerbaïdjan\": \"Azerbaijan\",\r\n        \"Bahamas\": \"Bahamas\",\r\n        \"Bahreïn\": \"Bahrain\",\r\n        \"Bangladesh\": \"Bangladesh\",\r\n        \"Barbade\": \"Barbados\",\r\n        \"Belgique\": \"Belgium\",\r\n        \"Belize\": \"Belize\",\r\n        \"Bénin\": \"Benin\",\r\n        \"Bhoutan\": \"Bhutan\",\r\n        \"Biélorussie\": \"Belarus\",\r\n        \"Birmanie\": \"Myanmar\",\r\n        \"Bolivie\": \"Bolivia\",\r\n        \"Bosnie-Herzégovine\": \"Bosnia and Herzegovina\",\r\n        \"Botswana\": \"Botswana\",\r\n        \"Brésil\": \"Brazil\",\r\n        \"Brunei\": \"Brunei\",\r\n        \"Bulgarie\": \"Bulgaria\",\r\n        \"Burkina Faso\": \"Burkina Faso\",\r\n        \"Burundi\": \"Burundi\",\r\n        \"Cambodge\": \"Cambodia\",\r\n        \"Cameroun\": \"Cameroon\",\r\n        \"Canada\": \"Canada\",\r\n        \"Cap-Vert\": \"Cape Verde\",\r\n        \"Chili\": \"Chile\",\r\n        \"Chine\": \"China\",\r\n        \"Chypre\": \"Cyprus\",\r\n        \"Colombie\": \"Colombia\",\r\n        \"Comores\": \"Comoros\",\r\n        \"Congo\": \"Congo\",\r\n        \"Corée du Nord\": \"North Korea\",\r\n        \"Corée du Sud\": \"South Korea\",\r\n        \"Costa Rica\": \"Costa Rica\",\r\n        \"Côte d'Ivoire\": \"Ivory Coast\",\r\n        \"Croatie\": \"Croatia\",\r\n        \"Cuba\": \"Cuba\",\r\n        \"Danemark\": \"Denmark\",\r\n        \"Djibouti\": \"Djibouti\",\r\n        \"Dominique\": \"Dominica\",\r\n        \"Égypte\": \"Egypt\",\r\n        \"Émirats Arabes Unis\": \"United Arab Emirates\",\r\n        \"Équateur\": \"Ecuador\",\r\n        \"Érythrée\": \"Eritrea\",\r\n        \"Espagne\": \"Spain\",\r\n        \"Estonie\": \"Estonia\",\r\n        \"Eswatini\": \"Eswatini\",\r\n        \"États-Unis d'Amérique\": \"United States of America\",\r\n        \"Éthiopie\": \"Ethiopia\",\r\n        \"Fidji\": \"Fiji\",\r\n        \"Finlande\": \"Finland\",\r\n        \"France\": \"France\",\r\n        \"Gabon\": \"Gabon\",\r\n        \"Gambie\": \"Gambia\",\r\n        \"Géorgie\": \"Georgia\",\r\n        \"Ghana\": \"Ghana\",\r\n        \"Grèce\": \"Greece\",\r\n        \"Grenade\": \"Grenada\",\r\n        \"Guatemala\": \"Guatemala\",\r\n        \"Guinée\": \"Guinea\",\r\n        \"Guinée-Bissau\": \"Guinea-Bissau\",\r\n        \"Guinée équatoriale\": \"Equatorial Guinea\",\r\n        \"Guyana\": \"Guyana\",\r\n        \"Haïti\": \"Haiti\",\r\n        \"Honduras\": \"Honduras\",\r\n        \"Hongrie\": \"Hungary\",\r\n        \"Îles Marshall\": \"Marshall Islands\",\r\n        \"Îles Salomon\": \"Solomon Islands\",\r\n        \"Inde\": \"India\",\r\n        \"Indonésie\": \"Indonesia\",\r\n        \"Irak\": \"Iraq\",\r\n        \"Iran\": \"Iran\",\r\n        \"Irlande\": \"Ireland\",\r\n        \"Islande\": \"Iceland\",\r\n        \"Palestine\": \"Palestine\",\r\n        \"Italie\": \"Italy\",\r\n        \"Jamaïque\": \"Jamaica\",\r\n        \"Japon\": \"Japan\",\r\n        \"Jordanie\": \"Jordan\",\r\n        \"Kazakhstan\": \"Kazakhstan\",\r\n        \"Kenya\": \"Kenya\",\r\n        \"Kirghizistan\": \"Kyrgyzstan\",\r\n        \"Kiribati\": \"Kiribati\",\r\n        \"Koweït\": \"Kuwait\",\r\n        \"Laos\": \"Laos\",\r\n        \"Lesotho\": \"Lesotho\",\r\n        \"Lettonie\": \"Latvia\",\r\n        \"Liban\": \"Lebanon\",\r\n        \"Libéria\": \"Liberia\",\r\n        \"Libye\": \"Libya\",\r\n        \"Liechtenstein\": \"Liechtenstein\",\r\n        \"Lituanie\": \"Lithuania\",\r\n        \"Luxembourg\": \"Luxembourg\",\r\n        \"Macédoine du Nord\": \"North Macedonia\",\r\n        \"Madagascar\": \"Madagascar\",\r\n        \"Malaisie\": \"Malaysia\",\r\n        \"Malawi\": \"Malawi\",\r\n        \"Maldives\": \"Maldives\",\r\n        \"Mali\": \"Mali\",\r\n        \"Malte\": \"Malta\",\r\n        \"Maroc\": \"Morocco\",\r\n        \"Maurice\": \"Mauritius\",\r\n        \"Mauritanie\": \"Mauritania\",\r\n        \"Mexique\": \"Mexico\",\r\n        \"États fédérés de Micronésie\": \"Federal States of Micronesia\",\r\n        \"Moldavie\": \"Moldova\",\r\n        \"Monaco\": \"Monaco\",\r\n        \"Mongolie\": \"Mongolia\",\r\n        \"Monténégro\": \"Montenegro\",\r\n        \"Mozambique\": \"Mozambique\",\r\n        \"Namibie\": \"Namibia\",\r\n        \"Nauru\": \"Nauru\",\r\n        \"Népal\": \"Nepal\",\r\n        \"Nicaragua\": \"Nicaragua\",\r\n        \"Niger\": \"Niger\",\r\n        \"Nigeria\": \"Nigeria\",\r\n        \"Norvège\": \"Norway\",\r\n        \"Nouvelle-Zélande\": \"New Zealand\",\r\n        \"Oman\": \"Oman\",\r\n        \"Ouganda\": \"Uganda\",\r\n        \"Ouzbékistan\": \"Uzbekistan\",\r\n        \"Pakistan\": \"Pakistan\",\r\n        \"Palaos\": \"Palau\",\r\n        \"Panama\": \"Panama\",\r\n        \"Papouasie-Nouvelle-Guinée\": \"Papua New Guinea\",\r\n        \"Paraguay\": \"Paraguay\",\r\n        \"Pays-Bas\": \"Netherlands\",\r\n        \"Pérou\": \"Peru\",\r\n        \"Philippines\": \"Philippines\",\r\n        \"Pologne\": \"Poland\",\r\n        \"Portugal\": \"Portugal\",\r\n        \"Qatar\": \"Qatar\",\r\n        \"République Centrafricaine\": \"Central African Republic\",\r\n        \"République Dominicaine\": \"Dominican Republic\",\r\n        \"République Démocratique du Congo\": \"Democratic Republic of the Congo\",\r\n        \"République du Congo\": \"Republic of the Congo\",\r\n        \"République Tchèque\": \"Czech Republic\",\r\n        \"Roumanie\": \"Romania\",\r\n        \"Royaume-Uni\": \"United Kingdom\",\r\n        \"Russie\": \"Russia\",\r\n        \"Rwanda\": \"Rwanda\",\r\n        \"Saint-Christophe-et-Niévès\": \"Saint Kitts and Nevis\",\r\n        \"Saint-Marin\": \"San Marino\",\r\n        \"Saint-Vincent-et-les-Grenadines\": \"Saint Vincent and the Grenadines\",\r\n        \"Sainte-Lucie\": \"Saint Lucia\",\r\n        \"Salomon\": \"Solomon Islands\",\r\n        \"Salvador\": \"El Salvador\",\r\n        \"Samoa\": \"Samoa\",\r\n        \"Sao Tomé-et-Principe\": \"Sao Tome and Principe\",\r\n        \"Sénégal\": \"Senegal\",\r\n        \"Serbie\": \"Serbia\",\r\n        \"Seychelles\": \"Seychelles\",\r\n        \"Sierra Leone\": \"Sierra Leone\",\r\n        \"Singapour\": \"Singapore\",\r\n        \"Slovaquie\": \"Slovakia\",\r\n        \"Slovénie\": \"Slovenia\",\r\n        \"Somalie\": \"Somalia\",\r\n        \"Soudan\": \"Sudan\",\r\n        \"Soudan du Sud\": \"South Sudan\",\r\n        \"Sri Lanka\": \"Sri Lanka\",\r\n        \"Suède\": \"Sweden\",\r\n        \"Suisse\": \"Switzerland\",\r\n        \"Suriname\": \"Suriname\",\r\n        \"Syrie\": \"Syria\",\r\n        \"Tadjikistan\": \"Tajikistan\",\r\n        \"Tanzanie\": \"Tanzania\",\r\n        \"Tchad\": \"Chad\",\r\n        \"Thaïlande\": \"Thailand\",\r\n        \"Timor oriental\": \"East Timor\",\r\n        \"Togo\": \"Togo\",\r\n        \"Tonga\": \"Tonga\",\r\n        \"Trinité-et-Tobago\": \"Trinidad and Tobago\",\r\n        \"Turkménistan\": \"Turkmenistan\",\r\n        \"Turquie\": \"Turkey\",\r\n        \"Tuvalu\": \"Tuvalu\",\r\n        \"Ukraine\": \"Ukraine\",\r\n        \"Uruguay\": \"Uruguay\",\r\n        \"Vanuatu\": \"Vanuatu\",\r\n        \"Vatican\": \"Vatican City\",\r\n        \"Venezuela\": \"Venezuela\",\r\n        \"Vietnam\": \"Vietnam\",\r\n        \"Yémen\": \"Yemen\",\r\n        \"Zambie\": \"Zambia\",\r\n        \"Zimbabwe\": \"Zimbabwe\"\r\n      };\r\n    \r\n      return countryNameMap[countryName] || countryName;\r\n    };\r\n    \r\n    \r\n    const getLatLng = async (city) => {\r\n      const apiKey = 'AIzaSyBJvL7tfCzIXc5w56h0xtbiF1_Lb5roxi4'; // Remplacez par votre clé API\r\n      const url = `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(city)}&key=${apiKey}`;\r\n      \r\n      try {\r\n        const response = await fetch(url);\r\n        const data = await response.json();\r\n        \r\n        if (data.status === 'OK') {\r\n          const location = data.results[0].geometry.location;\r\n          return { latitude: location.lat, longitude: location.lng };\r\n        } else {\r\n          return null;\r\n        }\r\n      } catch (error) {\r\n        console.error('Erreur lors de la récupération des coordonnées:', error);\r\n        return null;\r\n      }\r\n    };\r\n    const calculateEmissions = async () => {\r\n      const departureCity = await getCapital(departureCountry);\r\n      const selectedCity = await getCapital(selectedCountry);\r\n  \r\n      if (!departureCity || !selectedCity) {\r\n        console.error(\"Impossible de récupérer les informations sur les capitales\");\r\n        return;\r\n      }\r\n  \r\n      const departureLoc = await getLatLng(departureCity);\r\n      const selectedLoc = await getLatLng(selectedCity);\r\n  \r\n      if (departureLoc && selectedLoc) {\r\n        const distance = calculateDistance(departureLoc.latitude, departureLoc.longitude, selectedLoc.latitude, selectedLoc.longitude);\r\n        const carbonFootprint = calculateCarbonFootprint(distance);\r\n  \r\n        setDistance(distance.toFixed(2));\r\n        setCarbonFootprint(carbonFootprint.toFixed(2));\r\n      } else {\r\n        console.error(\"Erreur de calcul des émissions de carbone lors du trajet\");\r\n      }\r\n    };\r\n    const calculateDistance = (lat1, lon1, lat2, lon2) => {\r\n      const earthRadius = 6371; // Rayon de la Terre en km\r\n      const latDelta = toRadians(lat2 - lat1);\r\n      const lonDelta = toRadians(lon2 - lon1);\r\n  \r\n      const a = Math.sin(latDelta / 2) * Math.sin(latDelta / 2) +\r\n                Math.cos(toRadians(lat1)) * Math.cos(toRadians(lat2)) *\r\n                Math.sin(lonDelta / 2) * Math.sin(lonDelta / 2);\r\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n  \r\n      return earthRadius * c;\r\n    };\r\n  \r\n    const toRadians = (degrees) => {\r\n      return degrees * (Math.PI / 180);\r\n    };\r\n  \r\n    const calculateCarbonFootprint = (distance) => {\r\n      return distance * (229.97 * 0.001); // Conversion en kgCO2e/km/personne\r\n    };\r\n  \r\n    const departureCity = await getCapital(departureCountry);\r\n    const selectedCity = await getCapital(selectedCountry);\r\n    const departureLoc = await getLatLng(departureCity);\r\n    const selectedLoc = await getLatLng(selectedCity);\r\n  \r\n    if (departureLoc && selectedLoc) {\r\n      const distance = calculateDistance(departureLoc.latitude, departureLoc.longitude, selectedLoc.latitude, selectedLoc.longitude);\r\n      const carbonFootprint = calculateCarbonFootprint(distance);\r\n      \r\n      setDistance(distance.toFixed(2));\r\n      setCarbonFootprint(carbonFootprint.toFixed(2));      \r\n    } else {\r\n      console.error(\"Erreur de calcul des émissions de carbone lors du trajet\");\r\n    }\r\n    calculateEmissions();\r\n  };\r\n  const handleCountryChange = (event) => {\r\n    setSelectedCountry(event.target.value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (countryName) {\r\n        getActesSante();\r\n        getCountriesByName();\r\n    }\r\n  }, [countryName, getActesSante, getCountriesByName]);\r\n\r\n  return (\r\n    <div style={styles.container}>\r\n      <div style={styles.card}>\r\n        <div style={styles.cardHeader}>\r\n          <h2 style={styles.cardHeaderText}>Actes de Santé en {countryName}</h2>\r\n        </div>\r\n        <div style={styles.cardBody}>\r\n          {healthCareServices.map((service) => (\r\n            <div key={service.id} style={styles.serviceCard}>\r\n              <p style={styles.serviceText}>{service.service} - {service.prix}</p>\r\n            </div>\r\n          ))}\r\n\r\n          <h3 style={styles.subtitle}>Recommandations pour {countryName}</h3>\r\n          {recommendations.map((recommendation) => (\r\n            <div key={recommendation.id} style={styles.recommendationCard}>\r\n              <p>{recommendation.text}</p>\r\n              <button style={styles.deleteButton} onClick={() => handleDeleteRecommendation(recommendation.id)}>\r\n                Supprimer\r\n              </button>\r\n            </div>\r\n          ))}\r\n\r\n          <button style={styles.button} onClick={AddRecommendation}>\r\n            Ajouter Recommandation\r\n          </button>\r\n          <input\r\n            style={styles.input}\r\n            onChange={(e) => setNewRecommendation(e.target.value)}\r\n            value={newRecommendation}\r\n            placeholder=\"Ajouter une recommandation\"\r\n          />\r\n          \r\n          <h3 style={styles.subtitle}>Estimation de l'Empreinte Carbone pour le Voyage</h3>\r\n          <button onClick={() => setModalVisible(true)} style={styles.dropdown}>\r\n            {selectedCountry}\r\n          </button>\r\n\r\n          <label htmlFor=\"countrySelect\" style={styles.label}>Sélectionnez votre pays de départ :</label>\r\n          <select id=\"countrySelect\" style={styles.dropdown} value={selectedCountry} onChange={handleCountryChange}>\r\n            <option value=\"\">Sélectionnez un pays</option>\r\n            {departureCountries.map((country) => (\r\n              <option key={country} value={country}>{country}</option>\r\n            ))}\r\n          </select>\r\n\r\n          {selectedCountry !== \"Sélectionnez votre pays de départ\" && (\r\n            <button style={styles.button} onClick={() => handleEstimateCarbonFootprint(countryName, selectedCountry)}>\r\n              Calculer l'empreinte carbone\r\n            </button>\r\n          )}\r\n          <div>\r\n            {distance !== null && carbonFootprint !== null && (\r\n              <div>\r\n                <p>Distance: {distance} km</p>\r\n                <p>Empreinte carbone: {carbonFootprint} kgCO2e/km/personne</p>\r\n              </div>\r\n            )}\r\n          </div>\r\n          {carbonFootprint ? (\r\n            <button style={styles.button} onClick={() => addTrajet(paysId, selectedCountryId, carbonFootprint)}>\r\n              Ajouter aux trajets sauvegardés\r\n            </button>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst styles = {\r\n  container: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    padding: '2rem',\r\n    backgroundColor: '#f7f7f7',\r\n    minHeight: '100vh', // Assure que le container prend au moins toute la hauteur de la vue\r\n  },\r\n  card: {\r\n    backgroundColor: '#ffffff',\r\n    boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)',\r\n    borderRadius: '10px',\r\n    maxWidth: '800px', // Taille maximale pour une lecture confortable\r\n    width: '100%', // S'adapte à la largeur de l'écran\r\n    margin: '1rem',\r\n    overflow: 'hidden',\r\n  },\r\n  cardHeader: {\r\n    backgroundColor: '#0056b3', // Bleu profond pour un contraste élevé avec le texte blanc\r\n    color: '#ffffff',\r\n    padding: '1rem',\r\n    fontSize: '1.5rem',\r\n    fontWeight: 'bold',\r\n    textAlign: 'center',\r\n  },\r\n  cardBody: {\r\n    padding: '1rem',\r\n  },\r\n  serviceCard: {\r\n    borderBottom: '1px solid #eeeeee', // Ligne de séparation subtile\r\n    paddingBottom: '0.5rem',\r\n    marginBottom: '0.5rem',\r\n  },\r\n  serviceText: {\r\n    fontSize: '1rem',\r\n    color: '#333333', // Couleur foncée pour une meilleure lisibilité\r\n  },\r\n  subtitle: {\r\n    fontWeight: 'bold',\r\n    marginTop: '1rem',\r\n    marginBottom: '0.5rem',\r\n    fontSize: '1.2rem',\r\n  },\r\n  button: {\r\n    backgroundColor: '#28a745', // Vert pour les actions positives\r\n    color: '#ffffff',\r\n    padding: '10px 20px',\r\n    border: 'none',\r\n    borderRadius: '5px',\r\n    cursor: 'pointer',\r\n    margin: '0.5rem',\r\n    fontSize: '1rem',\r\n    transition: 'background-color 0.3s ease',\r\n    ':hover': { // Pseudo-classe hover pour un feedback visuel\r\n      backgroundColor: '#218838',\r\n    }\r\n  },\r\n  deleteButton: {\r\n    backgroundColor: '#dc3545', // Rouge pour les actions de suppression\r\n    ':hover': {\r\n      backgroundColor: '#c82333',\r\n    }\r\n  },\r\n  input: {\r\n    width: '100%', // Utilise toute la largeur disponible pour une entrée facile\r\n    padding: '10px',\r\n    marginBottom: '1rem',\r\n    border: '1px solid #cccccc',\r\n    borderRadius: '5px',\r\n    fontSize: '1rem',\r\n  },\r\n  dropdown: {\r\n    width: '100%',\r\n    padding: '10px',\r\n    marginBottom: '1rem',\r\n    border: '1px solid #cccccc',\r\n    borderRadius: '5px',\r\n    background: '#ffffff',\r\n    fontSize: '1rem',\r\n    cursor: 'pointer',\r\n  },\r\n  modalView: {\r\n    position: 'fixed',\r\n    top: '50%',\r\n    left: '50%',\r\n    transform: 'translate(-50%, -50%)',\r\n    backgroundColor: '#fff',\r\n    padding: '2rem',\r\n    borderRadius: '10px',\r\n    boxShadow: '0 4px 8px rgba(0, 0, 0, 0.2)',\r\n    zIndex: 1000, // S'assure que la modale est bien au-dessus des autres éléments\r\n    maxWidth: '600px',\r\n    width: '90%',\r\n  },\r\n  countryOption: {\r\n    padding: '10px',\r\n    ':hover': {\r\n      backgroundColor: '#f0f0f0',\r\n    }\r\n  },\r\n};\r\n\r\n\r\n\r\n// Exemple de composant avec liste déroulante pour les pays\r\n\r\n\r\n\r\n\r\n\r\nexport default CountryDetails;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}